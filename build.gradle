plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id 'com.diffplug.spotless' version '7.0.3'
  id 'org.springframework.boot' version '3.4.5'
  id 'io.spring.dependency-management' version '1.1.7'
}

java {
  sourceCompatibility = '17'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  // WORKAROUND: https://github.com/spring-projects/spring-framework/issues/28797
  implementation 'com.google.code.findbugs:jsr305:3.0.2'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'org.postgresql:postgresql'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testRuntimeOnly 'com.h2database:h2'
}

java {
  sourceCompatibility = '17'
  compileJava {
    options.release = 17
    options.encoding = 'utf-8'
    options.compilerArgs.addAll(['-Xlint:all,-processing,-serial', '-Werror'])
  }
  compileTestJava {
    options.release = 17
    options.encoding = 'utf-8'
    options.compilerArgs.addAll(['-Xlint:all,-processing,-serial', '-Werror'])
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events 'passed', 'skipped', 'failed'
    showExceptions = true
    exceptionFormat 'full'
  }
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
  }
}

checkstyle {
  toolVersion = "10.12.2"
  var archive = configurations.checkstyle.filter {
    it.name.startsWith("checkstyle")
  }
  config = resources.text.fromArchiveEntry(archive, "google_checks.xml")
  configProperties 'org.checkstyle.google.suppressionfilter.config': file('config/checkstyle-suppressions.xml')
  maxWarnings = 0
}

spotless {
  java {
    googleJavaFormat()
    licenseHeaderFile 'config/LicenseHeader.txt'
  }
}
